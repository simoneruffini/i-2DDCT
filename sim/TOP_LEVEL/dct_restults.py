import numpy as np

dct1d_inp0 = np.matrix(( (64,73,81,90,87,89,91,92),(-14,-9,-2,2,6,5,6,4),(-7,-7,-8,-1,-5,-1,-3,-2),(-2,-2,-6,-2,-2,-1,-1,0),(0,0,0,-1,2,1,2,2),(0,-2,1,-1,-1,0,0,-1),(0,-2,-1,0,-1,-1,-2,-1),(0,0,-1,1,1,0,0,2) ))
dct2d_inp0 = np.matrix(( (236,-1,-12,-6,2,-1,-3,1),(-23,-17,-6,-3,-2,0,1,-1),(-11,-9,-2,2,1,0,0,0),(-7,-1,1,2,1,0,0,0),(0,-1,1,1,0,-1,1,2),(2,0,2,-1,-1,1,1,-1),(-1,-1,0,-1,0,2,1,0),(-3,1,-4,-2,1,1,0,-1) ))

dct1d_inp1 = np.matrix(( (179,88,179,88,178,88,178,88),(0,125,0,125,-81,44,-81,44),(235,118,235,118,68,-49,68,-49),(0,106,0,106,-46,60,-46,60),(-180,-270,-180,-270,0,-90,0,-90),(0,70,0,70,230,301,230,301),(98,49,98,49,167,118,167,118),(0,25,0,25,-55,-30,-55,-30) ))
dct2d_inp1 = np.matrix(( (377,62,263,85,-382,425,305,-42),(24,72,244,32,-208,-313,-76,64),(0,0,0,0,0,0,0,0),(27,-74,-40,-53,108,83,46,-32),(0,0,0,0,0,0,0,0),(41,-32,103,-34,-14,-101,1,5),(1,0,0,0,0,1,0,0),(116,-181,107,-148,161,-32,80,-46) ))

dct1d_inp2 = np.matrix(( (-160,71,72,175,96,162,91,-45),(-115,-10,8,-78,23,-93,6,-85),(156,-5,-3,70,11,66,-3,-140),(-56,-1,-23,-51,-21,-50,-1,-31),(44,-2,9,4,0,-16,2,1),(-67,-5,5,231,-21,216,0,16),(-19,-1,-12,162,-28,166,-2,62),(-14,3,13,-50,-1,-47,0,16) ))
dct2d_inp2 = np.matrix(( (163,-122,54,-83,15,133,116,-28),(-82,-3,131,-8,27,-77,-70,-2),(-234,-51,-44,7,20,-164,-72,32),(-24,-32,141,-15,5,-1,1,-29),(-117,-59,15,-30,20,-20,9,-6),(2,-33,101,-17,18,64,39,-24),(-58,-65,20,-36,5,54,55,-7),(-82,93,-28,23,14,-218,-175,45) ))

dct1d_inp3 = np.matrix(( (-133,-130,-117,-112,-117,-108,-116,-110),(23,28,37,42,-31,42,-27,42),(-8,-5,-3,-9,-3,-3,0,-2),(39,37,37,40,-45,44,-45,43),(-3,-4,-4,3,1,3,-2,3),(57,59,65,57,-63,63,-67,63),(-8,-3,3,6,-5,3,-9,3),(174,174,184,190,-183,191,-183,189) ))
dct2d_inp3 = np.matrix(( (-333,55,-12,53,-1,83,-4,260),(-19,19,-6,38,-6,62,-2,176),(-10,10,1,23,-3,32,-6,91),(-5,-31,0,-30,1,-49,-8,-141),(0,-1,-4,1,4,-2,1,1),(2,-2,-2,-7,-1,-13,-1,-25),(7,46,0,58,2,87,7,246),(-5,-55,4,-68,-4,-94,-8,-287) ))


#[139 144 149 153 155 155 155 155 144 151 153 156 159 156 156 156 150 155 160 163 158 156 156 156 159 161 162 160 160 159 159 159 159 160 161 162 162 155 155 155 161 161 161 161 160 157 157 157 162 162 161 163 162 157 157 157 162 162 161 161 163 158 158 158 255 255 255   0   0 255 254 255 255 255 255   0   0 255 254   0 255 255 255   0   0 255 254 255 255 255 255   0   0 255 254   0 254   0 255 255   0 255 254 255 254   0 255 255   0 255 254   0 254   0 255 255   0 255 254 255 254   0 255 255   0 255 254   0  55  89   0   2  35  34 100 255 144 151 153 151 159 156 156 156 150 155 165 163 158 126 156 156 254   0 255 255   0 245 254 255 159 199 161 162 162 133 155 165 231   0 255 235   0 255 254 253 162 162 161 163 162 157 157 157  11  12 167 165 166 167 101 108 135  14 145  15 155  15 155  15 140  15 151  15 152  15 153  15 154  15 165  16 156  15 157  15 158  16 168  16 169  15 150  15  15 161  16 162  16 153  15 154 165  16 166  16 167  15 158  15  16 169  16 160  16 152  15 153 164  16 165  16 165  15 156  15]
#[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255]

din = np.array( (139,144,149,153,155,155,155,155,144,151,153,156,159,156,156,156,150,155,160,163,158,156,156,156,159,161,162,160,160,159,159,159,159,160,161,162,162,155,155,155,161,161,161,161,160,157,157,157,162,162,161,163,162,157,157,157,162,162,161,161,163,158,158,158,255,255,255,0,0,255,254,255,255,255,255,0,0,255,254,0,255,255,255,0,0,255,254,255,255,255,255,0,0,255,254,0,254,0,255,255,0,255,254,255,254,0,255,255,0,255,254,0,254,0,255,255,0,255,254,255,254,0,255,255,0,255,254,0,55,89,0,2,35,34,100,255,144,151,153,151,159,156,156,156,150,155,165,163,158,126,156,156,254,0,255,255,0,245,254,255,159,199,161,162,162,133,155,165,231,0,255,235,0,255,254,253,162,162,161,163,162,157,157,157,11,12,167,165,166,167,101,108,135,14,145,15,155,15,155,15,140,15,151,15,152,15,153,15,154,15,165,16,156,15,157,15,158,16,168,16,169,15,150,15,15,161,16,162,16,153,15,154,165,16,166,16,167,15,158,15,16,169,16,160,16,152,15,153,164,16,165,16,165,15,156,15) )
din = din.reshape((4,8,8))

#[  63  -15   -8   -3   -1   -1   -1   -1   73  -10   -8   -3   -1   -3   -2    0   81   -2   -8   -6    0    1   -1   -2   90    1   -2   -2   -2   -1    0    0   86    5   -5   -2    2   -1   -2    1   88    4   -2   -1    1   -1   -1    0   90    5   -3   -1    2   -1   -2    0   91    4   -2    0    1   -2   -2    1  178    0  235   -1 -180   -1   98   -1   88  125  117  105 -271   70   49   24  178    0  235   -1 -180   -1   98   -1   88  125  117  105 -271   70   49   24  178  -82   68  -47    0  230  166  -55   88   43  -50   59  -91  301  118  -30  178  -82   68  -47    0  230  166  -55   88   43  -50   59  -91  301  118  -30 -161 -116  155  -57   43  -68  -20  -15   71  -10   -6   -1   -3   -5   -1    2   72    7   -4  -23    8    4  -13   13  174  -79   70  -52    3  231  162  -51   96   23   11  -21    0  -21  -28   -2  162  -94   66  -50  -16  216  165  -47   90    5   -3   -1    2   -1   -2    0  -45  -85 -141  -32    1   16   61   15 -133   22   -8   38   -4   56   -8  173 -131   28   -6   36   -5   58   -4  174 -118   37   -3   36   -4   64    3  184 -113   41   -9   40    3   56    5  189 -118  -32   -3  -46    0  -63   -5 -183 -109   41   -3   44    2   63    2  190 -116  -27   -1  -46   -3  -68   -9 -184 -111   41   -3   43    2   62    3  188]
#[   0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112  113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128  129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144  145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160  161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176  177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192  193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208  209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224  225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240  241  242  243  244  245  246  247  248  249  250  251  252  253  254  255]

dct1d_full_run_data = np.array( (63,-15,-8,-3,-1,-1,-1,-1,73,-10,-8,-3,-1,-3,-2,0,81,-2,-8,-6,0,1,-1,-2,90,1,-2,-2,-2,-1,0,0,86,5,-5,-2,2,-1,-2,1,88,4,-2,-1,1,-1,-1,0,90,5,-3,-1,2,-1,-2,0,91,4,-2,0,1,-2,-2,1,178,0,235,-1,-180,-1,98,-1,88,125,117,105,-271,70,49,24,178,0,235,-1,-180,-1,98,-1,88,125,117,105,-271,70,49,24,178,-82,68,-47,0,230,166,-55,88,43,-50,59,-91,301,118,-30,178,-82,68,-47,0,230,166,-55,88,43,-50,59,-91,301,118,-30,-161,-116,155,-57,43,-68,-20,-15,71,-10,-6,-1,-3,-5,-1,2,72,7,-4,-23,8,4,-13,13,174,-79,70,-52,3,231,162,-51,96,23,11,-21,0,-21,-28,-2,162,-94,66,-50,-16,216,165,-47,90,5,-3,-1,2,-1,-2,0,-45,-85,-141,-32,1,16,61,15,-133,22,-8,38,-4,56,-8,173,-131,28,-6,36,-5,58,-4,174,-118,37,-3,36,-4,64,3,184,-113,41,-9,40,3,56,5,189,-118,-32,-3,-46,0,-63,-5,-183,-109,41,-3,44,2,63,2,190,-116,-27,-1,-46,-3,-68,-9,-184,-111,41,-3,43,2,62,3,188) )
dct1d_full_run_data = dct1d_full_run_data.reshape((4,8,8))
#[ 234  -23  -12   -8   -1    1   -2   -3   -3  -18  -10   -3   -1   -1   -1    1  -14   -7   -2    0    1    1   -1   -4   -7   -4    1    1    1   -1   -2   -2    0   -3    0    1   -1   -1    0    2   -4    0   -2   -1   -1    1    1    1   -4    0   -1   -1    0    1    0   -1   -1   -2   -1    0    1   -2   -2   -1  376   22    0   27    0   40    0  115   60   73    0  -75    0  -32    0 -182  261  244    0  -40    0  103    0  108   82   31    0  -53    0  -34    0 -148 -384 -208    0  108    0  -14    0  162  424 -315    0   82    0 -102    0  -33  304  -76    0   45    0    1    0   79  -44   62    0  -32    0    4    0  -46  162  -83 -234  -24 -118    0  -58  -82 -124   -4  -52  -33  -59  -34  -66   93   52  130  -45  141   14  101   19  -29  -84   -8    6  -16  -31  -18  -36   23   13   25   20    5   19   17    4   13  131  -78 -165   -1  -20   62   54 -219  114  -71  -73    0    9   38   53 -176  -31   -2   31  -29   -8  -24   -7   45 -336  -20  -10   -5   -1    2    6   -5   53   19   10  -32   -3   -3   45  -55  -13   -6    0    0   -4   -2    0    3   51   37   22  -31    1   -7   58  -69   -4   -6   -4   -1    3   -1    1   -4   80   61   31  -49   -3  -14   87  -94   -5   -3   -6   -9    1   -2    7   -7  258  176   90 -142    1  -26  245 -286]
#[   0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112  113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128  129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144  145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160  161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176  177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192  193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208  209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224  225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240  241  242  243  244  245  246  247  248  249  250  251  252  253  254  255]
dct2d_full_run_data = np.array( (234,-23,-12,-8,-1,1,-2,-3,-3,-18,-10,-3,-1,-1,-1,1,-14,-7,-2,0,1,1,-1,-4,-7,-4,1,1,1,-1,-2,-2,0,-3,0,1,-1,-1,0,2,-4,0,-2,-1,-1,1,1,1,-4,0,-1,-1,0,1,0,-1,-1,-2,-1,0,1,-2,-2,-1,376,22,0,27,0,40,0,115,60,73,0,-75,0,-32,0,-182,261,244,0,-40,0,103,0,108,82,31,0,-53,0,-34,0,-148,-384,-208,0,108,0,-14,0,162,424,-315,0,82,0,-102,0,-33,304,-76,0,45,0,1,0,79,-44,62,0,-32,0,4,0,-46,162,-83,-234,-24,-118,0,-58,-82,-124,-4,-52,-33,-59,-34,-66,93,52,130,-45,141,14,101,19,-29,-84,-8,6,-16,-31,-18,-36,23,13,25,20,5,19,17,4,13,131,-78,-165,-1,-20,62,54,-219,114,-71,-73,0,9,38,53,-176,-31,-2,31,-29,-8,-24,-7,45,-336,-20,-10,-5,-1,2,6,-5,53,19,10,-32,-3,-3,45,-55,-13,-6,0,0,-4,-2,0,3,51,37,22,-31,1,-7,58,-69,-4,-6,-4,-1,3,-1,1,-4,80,61,31,-49,-3,-14,87,-94,-5,-3,-6,-9,1,-2,7,-7,258,176,90,-142,1,-26,245,-286) )
dct2d_full_run_data = dct2d_full_run_data.reshape((4,8,8))

print(dct2d_full_run_data[0]-dct2d_inp0.transpose())
print(dct2d_full_run_data[1]-dct2d_inp1.transpose())
print(dct2d_full_run_data[2]-dct2d_inp2.transpose())
print(dct2d_full_run_data[3]-dct2d_inp3.transpose())

